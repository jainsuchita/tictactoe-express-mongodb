{"version":3,"sources":["state/types/index.tsx","state/actions/index.tsx","utils/index.tsx","state/operations/index.tsx","controls/Square/Square.tsx","controls/Board/Board.tsx","controls/Menu/Menu.tsx","controls/Appbar/Appbar.tsx","controls/PlayerInfo/PlayerInfo.tsx","controls/GameOverDialog/GameOverDialog.tsx","controls/HistoryDialog/HistoryDialog.tsx","controls/Table/Table.tsx","components/Game/Game.tsx","components/Layout/Layout.tsx","components/App/App.tsx","state/reducers/tictactoe.tsx","state/reducers/index.tsx","registerServiceWorker.ts","index.tsx","state/store/index.tsx"],"names":["NEW_GAME","GAME_OVER","GAME_MOVE","GAME_PLAYER","GAME_WINNER","SAVE_SCORE_HISTORY","actions_newGame","type","actions_gameOver","actions_winner","player","payload","winningPatterns","r","c","saveGameHistory","axios_default","a","post","baseURL","winner","then","response","console","log","catch","error","useStyles","Object","makeStyles","theme","createStyles","icon","fontSize","Square_Square","_a","classes","react","Icon","className","playerIcon","borderStyle","Board_useStyles","square","height","width","lineHeight","cursor","marked","row","textAlign","0_1","borderLeft","borderRight","2_1","1_1","border","1_0","borderTop","borderBottom","1_2","Board_Board","board","onMove","Grid","container","map","rIdx","key","item","xs","justify","col","cIdx","classnames_default","onClick","Menu_useStyles","drawer","breakpoints","up","flexShrink","toolbar","mixins","drawerPaper","Menu_Menu","open","onClose","handleMenuItemClick","useTheme","Divider","List","text","index","ListItem","button","ListItemIcon","FiberNew_default","Games_default","ListItemText","primary","aria-label","Hidden","smUp","implementation","Drawer","variant","anchor","direction","paper","ModalProps","keepMounted","xsDown","Appbar_useStyles","appBar","marginLeft","menuButton","_b","marginRight","spacing","display","Appbar","props","CssBaseline","AppBar","position","Toolbar","IconButton","color","edge","Menu_default","Typography","noWrap","PlayerInfo_PlayerInfo","gameOver","showPlayer","GameOverDialog","withMobileDialog","fullScreen","isDraw","title","Dialog","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","autoFocus","HistoryDialog_DialogTitle","withStyles","root","margin","padding","closeButton","right","top","palette","grey","children","disableTypography","Close_default","HistoryDialog_DialogContent","HistoryDialog_HistoryDialog","handleClose","dividers","Table_useStyles","marginTop","overflowX","table","minWidth","Table_Table","rows","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","game","component","scope","Game_Game","_super","Game","_this","call","this","state","showDialog","handleBoardOnMove","bind","handleDialogClick","handleDialogClose","tslib_es6","prototype","playTurn","checkWinner","setState","answer","newGame","render","draw","Card","style","sm","md","styled_components_browser_esm","div","templateObject_1","mapDispatchToProps","dispatch","nextPlayer","movePlayer","switchPlayer","hasWinner","some","pattern","every","isWinner","saveScoreHistory","utils_isDraw","components_Game_Game","es","scores","Layout_useStyles","content","flexGrow","Layout_mapDispatchToProps","Layout_Layout","mobileOpen","setMobileOpen","dialogOpen","setDialogOpen","_c","setRows","buildDataRows","data","rowsArr","d","datacell","obj","k","reduce","res","o","assign","push","updated","arr","createData","handleDrawerToggle","gameId","get","Layout_baseURL","sent","err_1","App_App","initialScore","score","reducers","redux","action","slice","saveScore","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","src_store","middlewares","redux_thunk_es","store","next","group","info","result","getState","groupEnd","redux_devtools_extension","apply","configureStore","initialBoard","react_dom","document","getElementById","URL","toString","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0a1e186a.chunk.js","sourcesContent":["export const NEW_GAME = \"GAME_NEW\";\nexport const GAME_OVER = \"GAME_OVER\";\nexport const GAME_MOVE = \"GAME_MOVE\";\nexport const GAME_PLAYER = \"GAME_PLAYER\";\nexport const GAME_WINNER = \"GAME_WINNER\";\nexport const SAVE_SCORE_HISTORY = \"SAVE_SCORE_HISTORY\";\n","import {\n  NEW_GAME,\n  GAME_OVER,\n  GAME_MOVE,\n  GAME_PLAYER,\n  GAME_WINNER,\n  SAVE_SCORE_HISTORY\n} from \"@state/types\";\n\nimport { IGameActionTypes } from \"@models\";\n\nexport function newGame(): IGameActionTypes {\n  return {\n    type: NEW_GAME\n  };\n}\n\nexport function gameOver(): IGameActionTypes {\n  return {\n    type: GAME_OVER\n  };\n}\n\nexport function movePlayer(\n  player: number,\n  row: number,\n  col: number\n): IGameActionTypes {\n  return {\n    type: GAME_MOVE,\n    payload: { player, row, col }\n  };\n}\n\nexport function switchPlayer(player: number): IGameActionTypes {\n  return {\n    type: GAME_PLAYER,\n    payload: player\n  };\n}\n\nexport function winner(player: number): IGameActionTypes {\n  return {\n    type: GAME_WINNER,\n    payload: player\n  };\n}\n\nexport function saveScoreHistory(player: number): IGameActionTypes {\n  return {\n    type: SAVE_SCORE_HISTORY,\n    payload: player\n  };\n}\n","import { BoardType } from \"@models\";\n\n/*\n  rows          crosses       columns\n  ['X','X','X'] ['X',' ',' '] ['X',' ',' '] \n  [' ',' ',' '] [' ','X',' '] ['X',' ',' ']\n  [' ',' ',' '] [' ',' ','X'] ['X',' ',' ']\n                \n  [' ',' ',' '] [' ',' ',' '] [' ','X',' ']\n  ['X','X','X'] [' ',' ',' '] [' ','X',' ']\n  [' ',' ',' '] [' ',' ',' '] [' ','X',' ']\n  \n  [' ',' ',' '] [' ',' ','X'] [' ',' ','X']\n  [' ',' ',' '] [' ','X',' '] [' ',' ','X']\n  ['X','X','X'] ['X',' ',' '] [' ',' ','X']\n*/\nconst winningPatterns = [\n  // rows\n  [{ r: 0, c: 0 }, { r: 0, c: 1 }, { r: 0, c: 2 }],\n  [{ r: 1, c: 0 }, { r: 1, c: 1 }, { r: 1, c: 2 }],\n  [{ r: 2, c: 0 }, { r: 2, c: 1 }, { r: 2, c: 2 }],\n  // crosses\n  [{ r: 0, c: 0 }, { r: 1, c: 1 }, { r: 2, c: 2 }],\n  [{ r: 0, c: 2 }, { r: 1, c: 1 }, { r: 2, c: 0 }],\n  // columns\n  [{ r: 0, c: 0 }, { r: 1, c: 0 }, { r: 2, c: 0 }],\n  [{ r: 0, c: 1 }, { r: 1, c: 1 }, { r: 2, c: 1 }],\n  [{ r: 0, c: 2 }, { r: 1, c: 2 }, { r: 2, c: 2 }]\n];\n\n/**\n * Checks to see if there's a winner\n * @param {number[][]} board The game board\n * @param {number} player The player\n * @returns {boolean} True if there is a winner, false otherwise\n */\nconst isWinner = (board: BoardType, player: number): boolean => {\n  return winningPatterns.some(pattern =>\n    pattern.every(square => {\n      const { r, c } = square;\n\n      return board[r][c] === player;\n    })\n  );\n};\n\n/**\n * Checks to see if there's a draw on the board\n * NOTE: this function is meant to be called if isWinner returns false\n * @param {number[][]} board The game board\n */\nconst isDraw = (board: BoardType): boolean => {\n  // if there are squares that have a 0 in them, that means the\n  // game is still in-progress\n  const notDraw = board.some(row => row.some(col => col === 0));\n\n  return !notDraw;\n};\n\nexport { isWinner, isDraw };\n","import {\n  switchPlayer,\n  movePlayer,\n  winner,\n  gameOver,\n  saveScoreHistory\n} from \"@state/actions\";\nimport { BoardType } from \"@models\";\nimport { isWinner, isDraw } from \"@utils\";\nimport axios from \"axios\";\n\nconst baseURL = process.env.REACT_APP_API_URL;\n/**\n * When a player plays a turn we need to mark that spot on the board.  We then need to\n * switch to the next player\n * @param {number} player The current player\n * @param {number} row The row on the board\n * @param {number} col The column on the board\n */\nexport const playTurn = (player: number, row: number, col: number) => (\n  dispatch: any\n) => {\n  let nextPlayer: number = player;\n\n  switch (player) {\n    case 1:\n      nextPlayer = 2;\n      break;\n    case 2:\n      nextPlayer = 1;\n      break;\n    default:\n      break;\n  }\n\n  dispatch(movePlayer(player, row, col));\n  dispatch(switchPlayer(nextPlayer));\n};\n\n// Save it to backend\nconst saveGameHistory = (player: number) => {\n  axios\n    .post(baseURL + \"/game\", {\n      winner: player\n    })\n\n    .then((response: any) => {\n      console.log(response);\n    })\n    .catch((error: any) => {\n      console.log(error);\n    });\n};\n\n/**\n * Checks for a winner, if there is one, we dispatch three actions, one for winning the\n * game (winner) and another for gameOver and one for saving the score of the winner.\n * If there isn't a winner, we need to check to see if the game ended in a draw, if so\n * we dispatch the same two actions, but with the player being NONE (0).\n * Finally, do nothing if the above two conditions aren't met.\n * @param {number[][]} board The game board\n * @param {number} player The current player\n */\nexport const checkWinner = (board: BoardType, player: number) => (\n  dispatch: any\n): boolean => {\n  // the logic to check if a player has won or the game ended in a draw are in\n  // the utils/game.js file.\n\n  // instead of returning a promise like we would if we were making an api call\n  // from our operations, we just return a boolean for the game winner\n  let hasWinner = true;\n\n  if (isWinner(board, player)) {\n    dispatch(winner(player));\n    dispatch(gameOver());\n    dispatch(saveScoreHistory(player));\n    saveGameHistory(player);\n  } else if (isDraw(board)) {\n    dispatch(winner(0));\n    dispatch(gameOver());\n    saveGameHistory(0);\n  } else {\n    hasWinner = false;\n  }\n\n  return hasWinner;\n};\n","import * as React from \"react\";\n\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Icon from \"@material-ui/core/Icon\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    icon: {\n      fontSize: \"2em\" // double the size of the square's font size\n    }\n  })\n);\n\nconst playerIcon = (player: number) => {\n  // these are icon names from https://material.io/icons/\n  // you can pick whichever you want, but I chose two that\n  // closely resembles X and O\n  switch (player) {\n    case 1:\n      return \"clear\"; // X\n    case 2:\n      return \"panorama_fish_eye\"; // O\n    default:\n      return \"\";\n  }\n};\n\ninterface IProps {\n  player: number;\n}\n\n// the Square is just a square on the game board, it will have nothing, an X or an O depending\n// on which player has marked the square\nconst Square: React.FunctionComponent<IProps> = ({ player }) => {\n  const classes = useStyles();\n  // 'player' is the player, or none, that marked this Square\n  return <Icon className={classes.icon}>{playerIcon(player)}</Icon>;\n};\n\nexport default Square;\n","import * as React from \"react\";\nimport classnames from \"classnames\";\n\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport Square from \"../Square/Square\";\nimport { BoardType } from \"@models\";\n\nconst borderStyle = \"1px solid black\";\n\n// styles is a function that accepts the base theme object from material-ui\n// and returns an object with either overrides or new styles to apply to\n// components and elements\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    // a square's dimension is 100x100px\n    square: {\n      height: 100,\n      width: 100,\n      lineHeight: \"100px\", // this is to center the icon in the square\n      fontSize: \"48px\", // the size of our player's icon\n      cursor: \"pointer\"\n    },\n    // if a square is marked, we show the not allowed circle with a line through it\n    marked: { cursor: \"not-allowed\" },\n    // a rows should have its content centered\n    row: { textAlign: \"center\" },\n    // these styles make up the border of the game cross pattern\n    \"0_1\": { borderLeft: borderStyle, borderRight: borderStyle },\n    \"2_1\": { borderLeft: borderStyle, borderRight: borderStyle },\n    \"1_1\": { border: borderStyle },\n    \"1_0\": { borderTop: borderStyle, borderBottom: borderStyle },\n    \"1_2\": { borderTop: borderStyle, borderBottom: borderStyle }\n  })\n);\n\ninterface IProps {\n  board: BoardType;\n  onMove: (row: number, col: number) => void;\n}\n\nconst Board: React.FunctionComponent<IProps> = ({ board, onMove }) => {\n  // the 'board' and 'onMove' handler are passed in from the props of the Game which\n  // holds this component and control the state\n  // we will simply render the 'board' in its current state and call the 'onMove'\n  // handler function given to us when a player clicks on a Square\n  const classes = useStyles();\n\n  return (\n    <Grid container>\n      {board.map((row, rIdx) => (\n        <Grid key={rIdx} item xs={12} className={classes.row}>\n          <Grid container justify=\"center\">\n            {row.map((col, cIdx) => {\n              // the border style for a square as defined by the styles object above\n              const border = classes[`${rIdx}_${cIdx}`] || \"\";\n              // remember that 0 is for NONE in our players enum...which we should add\n              const marked = col !== 0 ? classes.marked : \"\";\n\n              return (\n                <Grid\n                  key={cIdx}\n                  item\n                  className={classnames(classes.square, border, marked)}\n                  onClick={() => onMove(rIdx, cIdx)}\n                >\n                  {/* \n                      we have two options here, we can add the click event to the grid item or we can \n                      or we can pass it down to the Square to call when it is clicked on.  \n                      if we pass it down, we will need to update the square to accept the onMove event \n                      and give the coordinates that it resides in\n                    */}\n                  <Square player={col} />\n                </Grid>\n              );\n            })}\n          </Grid>\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default Board;\n","import * as React from \"react\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport GameIcon from \"@material-ui/icons/Games\";\nimport NewIcon from \"@material-ui/icons/FiberNew\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\n// import classnames from \"classnames\";\nimport {\n  makeStyles,\n  useTheme,\n  Theme,\n  createStyles\n} from \"@material-ui/core/styles\";\n// import Typography from \"@material-ui/core/Typography\";\n// import { ScoreHistoryType } from \"@models\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    drawer: {\n      [theme.breakpoints.up(\"sm\")]: {\n        width: drawerWidth,\n        flexShrink: 0\n      }\n    },\n    toolbar: theme.mixins.toolbar,\n    drawerPaper: {\n      width: drawerWidth\n    }\n  })\n);\n\ninterface IMenuProps {\n  container?: Element;\n  open: boolean;\n  // scores: ScoreHistoryType;\n  onClose: () => void;\n  handleMenuItemClick: (key: number) => void;\n}\n\nconst Menu: React.FunctionComponent<IMenuProps> = ({\n  container,\n  open,\n  onClose,\n  handleMenuItemClick\n  // scores\n}) => {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} />\n      <Divider />\n      <List>\n        {[\"Start New Game\", \"Game history\"].map((text, index) => (\n          <React.Fragment key={index}>\n            <ListItem\n              button\n              key={text}\n              onClick={() => handleMenuItemClick(index)}\n            >\n              <ListItemIcon>\n                {index % 2 === 0 ? <NewIcon /> : <GameIcon />}\n              </ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n\n            {/* {index % 2 !== 0 && (\n              <React.Fragment key={index}>\n                <Divider />\n                <List>\n                  {[\"Player1\", \"Player2\"].map((text, index) => (\n                    <ListItem button key={text}>\n                      <ListItemText primary={text} />\n                      <Typography variant=\"body2\">\n                        {scores[index].score}\n                      </Typography>\n                    </ListItem>\n                  ))}\n                </List>\n              </React.Fragment>\n            )} */}\n          </React.Fragment>\n        ))}\n      </List>\n      <Divider />\n    </div>\n  );\n\n  return (\n    <nav className={classes.drawer} aria-label=\"mailbox folders\">\n      {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n      <Hidden smUp implementation=\"css\">\n        <Drawer\n          container={container}\n          variant=\"temporary\"\n          anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\n          open={open}\n          onClose={onClose}\n          classes={{\n            paper: classes.drawerPaper\n          }}\n          ModalProps={{\n            keepMounted: true // Better open performance on mobile.\n          }}\n        >\n          {drawer}\n        </Drawer>\n      </Hidden>\n      <Hidden xsDown implementation=\"css\">\n        <Drawer\n          classes={{\n            paper: classes.drawerPaper\n          }}\n          variant=\"permanent\"\n          open\n        >\n          {drawer}\n        </Drawer>\n      </Hidden>\n    </nav>\n  );\n};\n\nexport default Menu;\n","import * as React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    appBar: {\n      marginLeft: drawerWidth,\n      [theme.breakpoints.up(\"sm\")]: {\n        width: `calc(100% - ${drawerWidth}px)`\n      }\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n      [theme.breakpoints.up(\"sm\")]: {\n        display: \"none\"\n      }\n    }\n  })\n);\n\ninterface IAppbarProps {\n  onClick: () => void;\n}\n\nexport default function Appbar(props: IAppbarProps) {\n  const { onClick } = props;\n  const classes = useStyles();\n\n  return (\n    <>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={onClick}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Tic Tac Toe\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </>\n  );\n}\n","import * as React from \"react\";\n\nimport Typography from \"@material-ui/core/Typography\";\n\ninterface IProps {\n  player: number;\n  gameOver: boolean;\n}\n\nconst PlayerInfo: React.FunctionComponent<IProps> = ({ player, gameOver }) => {\n  const showPlayer: string = player === 1 ? \"X\" : \"O\";\n  return (\n    <Typography variant=\"h4\">\n      {gameOver && \"Gameover!\"}\n      {!gameOver && `Next Turn: ${showPlayer}`}\n    </Typography>\n  );\n};\n\nexport default PlayerInfo;\n","import * as React from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport withMobileDialog from \"@material-ui/core/withMobileDialog\";\n\ninterface IProps {\n  fullScreen: boolean;\n  open: boolean;\n  isDraw: boolean;\n  player: number;\n  onClick: (open: boolean) => void;\n  onClose: (close: boolean) => void;\n}\n\nconst GameoverDialog: React.FunctionComponent<IProps> = ({\n  fullScreen,\n  open,\n  isDraw,\n  player,\n  onClick,\n  onClose\n}) => {\n  const title = isDraw ? \"Draw!\" : `Player - ${player} wins!`;\n\n  return (\n    <Dialog\n      fullScreen={fullScreen}\n      open={open}\n      onClose={onClose}\n      aria-labelledby=\"responsive-dialog-title\"\n    >\n      <DialogTitle id=\"responsive-dialog-title\">{title}</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          Would you like to start a new game?\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={() => onClick(false)} color=\"secondary\">\n          No\n        </Button>\n        <Button onClick={() => onClick(true)} color=\"primary\" autoFocus>\n          Yes\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default withMobileDialog()(GameoverDialog);\n","import * as React from \"react\";\nimport {\n  createStyles,\n  Theme,\n  withStyles,\n  WithStyles\n} from \"@material-ui/core/styles\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2)\n    },\n    closeButton: {\n      position: \"absolute\",\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500]\n    }\n  });\n\nexport interface IDialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: IDialogTitleProps) => {\n  const { children, classes, onClose } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={onClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2)\n  }\n}))(MuiDialogContent);\n\ninterface IProps {\n  open: boolean;\n  children: React.ReactNode;\n  handleClose: () => void;\n}\n\nconst HistoryDialog: React.FunctionComponent<IProps> = ({\n  open,\n  handleClose,\n  children\n}) => {\n  return (\n    <>\n      <Dialog\n        onClose={handleClose}\n        aria-labelledby=\"history-dialog-title\"\n        open={open}\n      >\n        <DialogTitle id=\"history-dialog-title\" onClose={handleClose}>\n          Game History\n        </DialogTitle>\n        <DialogContent dividers>{children}</DialogContent>\n      </Dialog>\n    </>\n  );\n};\n\nexport default HistoryDialog;\n","import * as React from \"react\";\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"100%\",\n      marginTop: theme.spacing(3),\n      overflowX: \"auto\"\n    },\n    table: {\n      minWidth: 400\n    }\n  })\n);\n\ninterface IProps {\n  rows: Array<{ game: number; winner: string }>;\n}\n\nconst SimpleTable: React.FunctionComponent<IProps> = ({ rows }) => {\n  const classes = useStyles();\n\n  return (\n    <Paper className={classes.root}>\n      <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell>Game</TableCell>\n            <TableCell align=\"right\">Winner</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map(row => (\n            <TableRow key={row.game}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.game}\n              </TableCell>\n              <TableCell align=\"right\">{row.winner}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n};\n\nexport default SimpleTable;\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\n\n// Styling\nimport styled from \"styled-components\";\n\nimport Grid from \"@material-ui/core/Grid\";\n\n// Local Components\nimport { IAppState, BoardType, ScoreHistoryType } from \"@models\";\nimport { playTurn, checkWinner } from \"@state/operations\";\nimport { newGame } from \"@state/actions\";\nimport { Board, GameOverDialog, PlayerInfo } from \"@controls\";\n\ninterface IProps {\n  player: number;\n  board: BoardType;\n  gameOver: boolean;\n  winner: number;\n  scores: ScoreHistoryType;\n  playTurn: (player: number, row: number, col: number) => void;\n  checkWinner: (board: BoardType, player: number) => boolean;\n  newGame: () => void;\n}\n\ninterface IState {\n  showDialog: boolean;\n}\n\nclass Game extends React.Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n    // we are now keeping local state only to track whether or not the gameover dialog is open\n    this.state = { showDialog: false };\n\n    this.handleBoardOnMove = this.handleBoardOnMove.bind(this);\n    this.handleDialogClick = this.handleDialogClick.bind(this);\n    this.handleDialogClose = this.handleDialogClose.bind(this);\n  }\n\n  handleBoardOnMove(row: number, col: number): void {\n    // when a square is clicked we want to mark that square for the current player\n\n    const { board, player, gameOver, playTurn, checkWinner } = this.props;\n\n    // only mark if the game is still in progress and the square is empty (none)\n    // otherwise, ignore the play\n    if (gameOver || board[row][col] !== 0) {\n      return;\n    }\n\n    // make a play for the player\n    playTurn(player, row, col);\n\n    // we now want to know the result of a winner check so we can update the\n    // state of the game locally to show a dialog of the winner\n    const hasWinner = checkWinner(board, player);\n\n    if (hasWinner) {\n      this.setState({ showDialog: true });\n    }\n  }\n\n  handleDialogClick(answer: boolean) {\n    // we only want to start a new game if the player clicks 'yes'\n    if (answer) {\n      this.props.newGame();\n    }\n\n    // we always want to close the dialog\n    this.setState({ showDialog: false });\n  }\n\n  handleDialogClose() {\n    this.setState({ showDialog: false });\n  }\n\n  render() {\n    const { showDialog } = this.state;\n    const { board, player, gameOver, winner } = this.props;\n    const draw = winner === 0;\n\n    return (\n      <>\n        <Card>\n          <PlayerInfo player={player} gameOver={gameOver} />\n\n          <Grid container style={{ marginTop: 32 }}>\n            <Grid item xs={12} sm={12} md={12}>\n              <Board board={board} onMove={this.handleBoardOnMove} />\n            </Grid>\n          </Grid>\n        </Card>\n        {showDialog && (\n          <GameOverDialog\n            open={showDialog}\n            isDraw={draw}\n            player={winner}\n            onClick={this.handleDialogClick}\n            onClose={this.handleDialogClose}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nconst Card = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  transition: box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  min-width: 300px;\n\n  & p {\n    font-size: 18px;\n  }\n`;\n\nconst mapStateToProps = (state: IAppState) => {\n  const { board, player, gameOver, winner, scores } = state;\n\n  return {\n    board,\n    player,\n    gameOver,\n    winner,\n    scores\n  };\n};\n\nconst mapDispatchToProps = { playTurn, checkWinner, newGame };\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Game);\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\n\nimport { Appbar, Menu, HistoryDialog, Table } from \"@controls\";\n\nimport { newGame } from \"@state/actions\";\nimport Axios from \"axios\";\n\nconst baseURL = process.env.REACT_APP_API_URL;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\"\n    },\n\n    toolbar: theme.mixins.toolbar,\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3)\n    }\n  })\n);\n\ninterface ILayoutProps {\n  children?: React.ReactNode;\n  // scores: ScoreHistoryType;\n  newGame: () => void;\n}\n\ninterface IRows {\n  gameId: number;\n  winner: number;\n}\n\nconst Layout: React.FunctionComponent = (props: ILayoutProps) => {\n  const { children, newGame } = props;\n\n  const classes = useStyles();\n\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n  const [dialogOpen, setDialogOpen] = React.useState(false);\n  const [rows, setRows] = React.useState<Array<object> | any>([]);\n  // const [response, setResponse] = React.useState<Array<object> | null>(null);\n  // const [error, setError] = React.useState<any>(null);\n\n  // const reject = (obj: object, keys: Array<string>) => {\n  //   return Object.keys(obj)\n  //     .filter(k => !keys.includes(k))\n  //     .map(k => Object.assign({}, { [k]: obj[k] }))\n  //     .reduce((res, o) => Object.assign(res, o), {});\n  // };\n\n  const pick = (obj: object, keys: Array<string>) => {\n    return keys\n      .map(k => (k in obj ? { [k]: obj[k] } : {}))\n      .reduce((res, o) => Object.assign(res, o), {});\n  };\n\n  const buildDataRows = (data: Array<any>) => {\n    const rowsArr: Array<any> = [];\n    data.map((d: object) => {\n      let datacell: object;\n      datacell = pick(d, [\"winner\", \"gameId\"]);\n      rowsArr.push(datacell);\n    });\n\n    const updated = rowsArr.map(arr => {\n      return createData(arr);\n    });\n\n    setRows(updated);\n  };\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const showGameHistoryDialog = async () => {\n    try {\n      const res = await Axios.get(baseURL + \"/game\");\n      // setResponse(res.data);\n      buildDataRows(res.data);\n    } catch (err) {\n      // setError(err);\n      console.log(\"error - \", err);\n    }\n    setDialogOpen(true);\n  };\n\n  const closeHistoryDialog = () => {\n    setDialogOpen(false);\n  };\n\n  const handleMenuItemClick = (key: number): void => {\n    if (key === 0) {\n      newGame();\n    } else if (key === 1) {\n      showGameHistoryDialog();\n    }\n    setMobileOpen(false);\n  };\n\n  const createData = (rows: IRows) => {\n    const { gameId, winner } = rows;\n    if (winner === 1) {\n      return { game: gameId, winner: \"Player1\" };\n    } else if (winner === 2) {\n      return { game: gameId, winner: \"Player2\" };\n    } else if (winner === 0) {\n      return { game: gameId, winner: \"Draw\" };\n    } else {\n      return { game: gameId, winner: \"Error\" };\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n\n      <Appbar onClick={handleDrawerToggle} />\n\n      <Menu\n        open={mobileOpen}\n        onClose={handleDrawerToggle}\n        handleMenuItemClick={handleMenuItemClick}\n        // scores={scores}\n      />\n\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        {children}\n      </main>\n\n      {dialogOpen && (\n        <HistoryDialog open={dialogOpen} handleClose={closeHistoryDialog}>\n          <Table rows={rows} />\n        </HistoryDialog>\n      )}\n    </div>\n  );\n};\n\n// const mapStateToProps = (state: IAppState) => {\n//   const { scores } = state;\n\n//   return {\n//     scores\n//   };\n// };\n\nconst mapDispatchToProps = { newGame };\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Layout);\n","import * as React from \"react\";\n\n// Local components\nimport Game from \"../Game/Game\";\nimport Layout from \"../Layout/Layout\";\n\nconst App = () => {\n  return (\n    <Layout>\n      <Game />\n    </Layout>\n  );\n};\n\nexport default App;\n","import {\n  NEW_GAME,\n  GAME_OVER,\n  GAME_MOVE,\n  GAME_PLAYER,\n  GAME_WINNER,\n  SAVE_SCORE_HISTORY\n} from \"../types\";\n\nimport { IGameActionTypes, BoardType, ScoreHistoryType } from \"@models\";\n\nconst emptyBoard = () => [[0, 0, 0], [0, 0, 0], [0, 0, 0]];\n\nconst move = (board: BoardType, { player, row, col }: any) => {\n  const updated = board.slice();\n\n  updated[row][col] = player;\n\n  return updated;\n};\n\nexport const boardReducer = (\n  state = emptyBoard(),\n  action: IGameActionTypes\n): BoardType => {\n  switch (action.type) {\n    case NEW_GAME:\n      return emptyBoard();\n    case GAME_MOVE:\n      return move(state, action.payload);\n    default:\n      return state;\n  }\n};\n\nexport const playerReducer = (state = 1, action: IGameActionTypes): number => {\n  // TODO: abstract out the player into an enumeration, { NONE: 0, Player1: 1, Player2: 2 }\n  switch (action.type) {\n    case GAME_PLAYER:\n      return action.payload;\n    case NEW_GAME:\n      return 1;\n    default:\n      return state;\n  }\n};\n\nexport const gameoverReducer = (\n  state = false,\n  action: IGameActionTypes\n): boolean => {\n  switch (action.type) {\n    case NEW_GAME:\n      return false;\n    case GAME_OVER:\n      return true;\n    case GAME_WINNER:\n      return true;\n    default:\n      return state;\n  }\n};\n\nexport const winnerReducer = (state = -1, action: IGameActionTypes): number => {\n  switch (action.type) {\n    case GAME_WINNER:\n      return action.payload;\n    case NEW_GAME:\n      return -1;\n    default:\n      return state;\n  }\n};\n\nconst initialScore = [\n  {\n    id: 1,\n    score: 0\n  },\n  {\n    id: 2,\n    score: 0\n  }\n];\n\nconst saveScore = (state: ScoreHistoryType, player: number) => {\n  const updated = state.slice();\n  const newScore = updated.map(item => {\n    if (item.id === player) {\n      item.score++;\n    }\n    return item;\n  });\n\n  return newScore;\n};\n\nexport const scoreReducer = (\n  state = initialScore,\n  action: IGameActionTypes\n): ScoreHistoryType => {\n  switch (action.type) {\n    case SAVE_SCORE_HISTORY:\n      return saveScore(state, action.payload);\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\n\nimport {\n  boardReducer,\n  gameoverReducer,\n  winnerReducer,\n  playerReducer,\n  scoreReducer\n} from \"./tictactoe\";\n\nconst rootReducers = combineReducers({\n  board: boardReducer,\n  gameOver: gameoverReducer,\n  winner: winnerReducer,\n  player: playerReducer,\n  scores: scoreReducer\n});\n\nexport default rootReducers;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Provider as ReduxProvider } from \"react-redux\";\n\n// Local Components\nimport { App } from \"@components\";\nimport { configureStore } from \"@state/store\";\nimport { newGame } from \"@state/actions\";\n\n// Style\nimport \"./index.css\";\n\n// Service Workers\nimport registerServiceWorker from \"./registerServiceWorker\";\n\n// At a later point, we can pull the state stored in local storage (or another source)\n// and use it to create the store from a previous state.\nconst initialState = null;\nconst store = configureStore(initialState || {});\n\nif (!initialState) {\n  // since we don't have any persisted state, we should start a new game when the game loads\n\n  // our new game operation returns an action object that we can use in the\n  // redux store to dispatch\n  const initialBoard = newGame();\n\n  store.dispatch(initialBoard);\n}\n\nconst Root = () => (\n  <ReduxProvider store={store}>\n    <App />\n  </ReduxProvider>\n);\n\nReactDOM.render(<Root />, document.getElementById(\"root\") as HTMLElement);\n\nregisterServiceWorker();\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport rootReducer from \"../reducers\";\n\n// const isProduction = process.env.NODE_ENV === \"production\";\n\n/**\n * Logger middleware doesn't add any extra types to dispatch, just logs actions\n * and state.\n */\nfunction logger() {\n  const loggerMiddleware = (store: any) => (next: any) => (action: any) => {\n    console.group(action.type);\n    console.info(\"dispatching\", action);\n    const result = next(action);\n    console.log(\"next state\", store.getState());\n    // @ts-ignore\n    console.groupEnd(action.type);\n    return result;\n  };\n\n  return loggerMiddleware;\n}\n\nexport function configureStore(state = {}) {\n  const middlewares = [thunkMiddleware, logger()]; // lets us return functions from action creators\n\n  // if (!isProduction) {\n  //   middlewares.push(logger());\n  // }\n\n  const store = createStore(\n    rootReducer,\n    state,\n    composeWithDevTools(applyMiddleware(...middlewares))\n  );\n\n  return store;\n}\n"],"sourceRoot":""}